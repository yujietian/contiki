
.SUFFIXES:

### Define the CPU directory
CONTIKI_CPU=$(CONTIKI)/cpu/stm32f103c8

### Define the source files we have in the STM32W port

CONTIKI_CPU_DIRS = . dev Libraries/CMSIS/CM3/CoreSupport \
					 	 Libraries/CMSIS/CM3/DeviceSupport/ST/STM32F10x \
						 Libraries/STM32F10x_StdPeriph_Driver/src

INC_FLAGS= -I $(CONTIKI_CPU)/Libraries/STM32F10x_StdPeriph_Driver/inc \
		   -I $(CONTIKI_CPU)/Libraries/CMSIS/CM3/CoreSupport \
		   -I $(CONTIKI_CPU)/Libraries/CMSIS/CM3/DeviceSupport/ST/STM32F10x

STM32F103C8_SOURCEFILES = stm32f10x_it.c newlib.c hal_uart.c rtimer-arch.c clock.c \
							core_cm3.c \
		   					system_stm32f10x.c \
							misc.c \
							stm32f10x_adc.c \
							stm32f10x_bkp.c \
							stm32f10x_can.c \
							stm32f10x_cec.c \
							stm32f10x_crc.c \
							stm32f10x_dac.c \
							stm32f10x_dbgmcu.c \
							stm32f10x_dma.c \
							stm32f10x_exti.c \
							stm32f10x_flash.c \
							stm32f10x_fsmc.c \
							stm32f10x_gpio.c \
							stm32f10x_i2c.c \
							stm32f10x_iwdg.c \
							stm32f10x_pwr.c \
							stm32f10x_rcc.c \
							stm32f10x_sdio.c \
							stm32f10x_spi.c \
							stm32f10x_tim.c \
							stm32f10x_usart.c \
							stm32f10x_wwdg.c \
							stm32f10x_rtc.c

ASM_SOURCEFILE = startup_stm32f10x_md.S

ifdef ELF_LOADER
ELFLOADER  = elfloader-arch.c symtab.c
endif

CPU_LD_CONFIG = $(CONTIKI_CPU)/stm32_flash.ld

# .s and .s79 not specified here because in Makefile.include only .c and .S suffixes are replaced with .o.
CONTIKI_TARGET_SOURCEFILES += $(STM32F103C8_SOURCEFILES) \
                              $(SYSAPPS) $(ELFLOADER) \
                              $(TARGETLIBS) $(ASM_SOURCEFILE)

CONTIKI_SOURCEFILES        += $(CONTIKI_TARGET_SOURCEFILES)

TARGET_LIBFILES =

### Compiler definitions
# GCC
CC	 = arm-none-eabi-gcc
LD   = arm-none-eabi-gcc
AS	 = arm-none-eabi-gcc
NM	 = arm-none-eabi-nm
AR       = arm-none-eabi-ar
OBJCOPY  = arm-none-eabi-objcopy
STRIP    = arm-none-eabi-strip
SIZE     = arm-none-eabi-size

ifndef DEBUG
OPTI = -Os -ffunction-sections 
endif

CFLAGSNO = -W -Wall -g -mcpu=cortex-m3 -mthumb -D__MICROLIB -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER -DSTDOUT_USART=1 -std=c99 -mlittle-endian -mfloat-abi=soft $(INC_FLAGS)
#-mthumb-interwork -Wl,--gc-sections
CFLAGS  += $(CFLAGSNO) $(OPTI)
ASFLAGS = -W -Wall -g -mcpu=cortex-m3 -mthumb -c -Os -ffunction-sections -mlittle-endian

LDFLAGS +=  -L$(CONTIKI_CPU)\
	    -mcpu=cortex-m3 -mthumb -Wl,--gc-sections \
	    -Wl,-static \
	    -Wl,-T -Xlinker $(CPU_LD_CONFIG) \
	    -Wl,-Map -Xlinker contiki-$(TARGET).map
	    
		#	-u Default_Handler 
	    #-nostartfiles 
ifndef ELF_LOADER
 # Do not use garbage collection when the elfloader is used.
LDFLAGS += -Wl,--gc-sections
endif 
 
SIZEFLAGS = -A
OBJOPTS = -O binary


ifdef COFFEE_ADDRESS
 COFFEE = 1
endif

# Default values for coffee section start.
ifndef COFFEE_ADDRESS
 COFFEE_ADDRESS = 0x8010c00
endif

ifeq ($(COFFEE),1)
 CONTIKI_TARGET_SOURCEFILES += cfs-coffee.c cfs-coffee-arch.c
 CFLAGS += -DCOFFEE_ADDRESS=$(COFFEE_ADDRESS)
 
 #If $make invokation passed starting address use phony target to force synchronization of source to .coffeefiles section
 #Warning: recompilation will not be forced if the starting address is then dropped, with dire consequences:
 # -->Source that uses COFFEE_FILES and read macros for conditional compilation will be left hanging!
 # -->Object modules that used .coffeefiles will overlap the .data section.
 # -->$make clean is safest.
#ifeq ($(origin COFFEE_ADDRESS), command line)
# ifeq ($(COFFEE_FILES), 2)      #safest to force recompilation even if eeprom address is changed, might have been switched from flash
   .PHONY : coffee
   coffee:
   $(OBJECTDIR)/cfs-coffee-arch.o    : coffee      #cfs-coffee-arch uses COFFEE_FILES, COFFEE_ADDRESS
   $(OBJECTDIR)/cfs-coffee.o         : coffee      #core routine requires recompilation

else
 # Coffee starts at the end of the flash, before NVM section.
 COFFEE_ADDRESS = 0x801F800
endif

LDFLAGS+= -Wl,--section-start=.coffee=$(COFFEE_ADDRESS)

### Custom rules

ssubst = ${patsubst %.S,%.o,$(1)}

CONTIKI_OBJECTFILES += ${addprefix $(OBJECTDIR)/,${call ssubst, $(ASM_SOURCEFILE)}}

CUSTOM_RULE_C_TO_CE = 1
%.ce: %.c
	$(TRACE_CC)
	$(Q)$(CC) $(CFLAGS) -fno-merge-constants -fno-function-sections -DAUTOSTART_ENABLE -c $< -o $@
	$(STRIP) --strip-unneeded -g -x $@

CUSTOM_RULE_LINK = 1

ifdef CORE
ifeq ($(wildcard $(CORE)),)
 ${error $(CORE) doesn\'t exist}
endif
.PHONY: symbols.c symbols.h
symbols.c:
	$(NM) $(CORE) | awk -f $(CONTIKI)/tools/mknmlist > symbols.c
else
symbols.c symbols.h:
	cp ${CONTIKI}/tools/empty-symbols.c symbols.c
	cp ${CONTIKI}/tools/empty-symbols.h symbols.h
endif
#$(OBJECTDIR)/newlib.o $(OBJECTDIR)/symbols.o

%.$(TARGET): %.co $(PROJECT_OBJECTFILES) $(PROJECT_LIBRARIES) contiki-$(TARGET).a
	$(TRACE_LD)
	$(Q)$(LD) $(LDFLAGS) $(TARGET_STARTFILES) ${filter-out %.a,$^} -Wl,-\( ${filter %.a,$^} $(TARGET_LIBFILES) -Wl,-\) -o $@
	@echo >> contiki-$(TARGET).map
	@$(SIZE) $(SIZEFLAGS) $@ >> contiki-$(TARGET).map

#%.$(TARGET): %.co $(PROJECT_OBJECTFILES) $(PROJECT_LIBRARIES) $(CONTIKI_OBJECTFILES)
#	$(TRACE_LD)
#	$(Q)$(LD) $(LDFLAGS) $(TARGET_STARTFILES) ${filter-out %.a,$^} ${filter %.a,$^} $(TARGET_LIBFILES) -o $@
#	@echo "\n" >> contiki-$(TARGET).map
#	@$(SIZE) $(SIZEFLAGS) $@ >> contiki-$(TARGET).map


$(OBJECTDIR)/%.o: %.S | $(OBJECTDIR)
	$(TRACE_AS)
	$(Q)$(AS) $(ASFLAGS) -o $@ $< 

%.bin: %.$(TARGET)
	$(OBJCOPY) $(OBJOPTS) $< $@


